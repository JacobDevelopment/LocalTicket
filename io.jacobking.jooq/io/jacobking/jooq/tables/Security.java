/*
 * This file is generated by jOOQ.
 */
package io.jacobking.jooq.tables;


import io.jacobking.jooq.DefaultSchema;
import io.jacobking.jooq.Keys;
import io.jacobking.jooq.tables.records.SecurityRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Security extends TableImpl<SecurityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>SECURITY</code>
     */
    public static final Security SECURITY = new Security();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityRecord> getRecordType() {
        return SecurityRecord.class;
    }

    /**
     * The column <code>SECURITY.USERNAME</code>.
     */
    public final TableField<SecurityRecord, String> USERNAME = createField(DSL.name("USERNAME"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>SECURITY.PASSWORD</code>.
     */
    public final TableField<SecurityRecord, String> PASSWORD = createField(DSL.name("PASSWORD"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>SECURITY.PERMISSIONS</code>.
     */
    public final TableField<SecurityRecord, Integer> PERMISSIONS = createField(DSL.name("PERMISSIONS"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("3"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>SECURITY.LOGIN_ATTEMPTS</code>.
     */
    public final TableField<SecurityRecord, Integer> LOGIN_ATTEMPTS = createField(DSL.name("LOGIN_ATTEMPTS"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("3"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>SECURITY.FIRST_LOGIN</code>.
     */
    public final TableField<SecurityRecord, Boolean> FIRST_LOGIN = createField(DSL.name("FIRST_LOGIN"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("TRUE"), SQLDataType.BOOLEAN)), this, "");

    private Security(Name alias, Table<SecurityRecord> aliased) {
        this(alias, aliased, null);
    }

    private Security(Name alias, Table<SecurityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>SECURITY</code> table reference
     */
    public Security(String alias) {
        this(DSL.name(alias), SECURITY);
    }

    /**
     * Create an aliased <code>SECURITY</code> table reference
     */
    public Security(Name alias) {
        this(alias, SECURITY);
    }

    /**
     * Create a <code>SECURITY</code> table reference
     */
    public Security() {
        this(DSL.name("SECURITY"), null);
    }

    public <O extends Record> Security(Table<O> child, ForeignKey<O, SecurityRecord> key) {
        super(child, key, SECURITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<SecurityRecord> getPrimaryKey() {
        return Keys.SECURITY__PK_SECURITY;
    }

    @Override
    public Security as(String alias) {
        return new Security(DSL.name(alias), this);
    }

    @Override
    public Security as(Name alias) {
        return new Security(alias, this);
    }

    @Override
    public Security as(Table<?> alias) {
        return new Security(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Security rename(String name) {
        return new Security(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Security rename(Name name) {
        return new Security(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Security rename(Table<?> name) {
        return new Security(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, Integer, Integer, Boolean> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super Integer, ? super Integer, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super Integer, ? super Integer, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
