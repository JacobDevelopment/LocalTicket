plugins {
  id 'java'
  id 'application'
  id 'org.javamodularity.moduleplugin' version '1.8.12'
  id 'org.openjfx.javafxplugin' version '0.0.13'
  id 'org.beryx.jlink' version '2.25.0'
  id 'nu.studer.jooq' version '8.2'
}

group 'io.jacobking'
version '1.0-SNAPSHOT'

repositories {
  mavenCentral()
}

ext {
  junitVersion = '5.9.2'
}

sourceCompatibility = '19'
targetCompatibility = '19'

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
}

application {
  mainModule = 'io.jacobking.localticket'
  mainClass = 'io.jacobking.localticket.LocalTicket'
}

javafx {
  version = '19.0.2'
  modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
  implementation('org.controlsfx:controlsfx:11.1.2')
  implementation group: 'com.zaxxer', name: 'HikariCP', version: '5.0.1'
  implementation 'commons-io:commons-io:2.13.0'
  implementation group: 'com.h2database', name: 'h2', version: '2.2.220'
  implementation group: 'com.password4j', name: 'password4j', version: '1.7.1'
  jooqGenerator 'com.h2database:h2database:2.2.220'
  implementation 'org.jooq:jooq:3.18.5'
}

test {
  useJUnitPlatform()  }

jlink {
  imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
  options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
  launcher {
    name = 'app'
  }
}

jlinkZip {
  group = 'distribution'
}

import org.jooq.meta.jaxb.Logging

jooq {
  version = '3.18.4'  // default (can be omitted)
  edition = nu.studer.gradle.jooq.JooqEdition.OSS  // default (can be omitted)

  configurations {
    main {  // name of the jOOQ configuration
      generateSchemaSourceOnCompilation = true  // default (can be omitted)

      generationTool {
        logging = Logging.WARN
        jdbc {
          driver = 'org.h2.Driver'
          url = 'io/jacobking/localticket/sql/LocalTicket.mv.db'
          user = 'admin'
          password = 'MASTERKEY'
          properties {
            property {
              key = 'ssl'
              value = 'true'
            }
          }
        }
        generator {
          name = 'org.jooq.codegen.DefaultGenerator'
          database {
            name = 'org.jooq.meta.postgres.PostgresDatabase'
            inputSchema = 'public'
            forcedTypes {
              forcedType {
                name = 'varchar'
                includeExpression = '.*'
                includeTypes = 'JSONB?'
              }
              forcedType {
                name = 'varchar'
                includeExpression = '.*'
                includeTypes = 'INET'
              }
            }
          }
          generate {
            deprecated = false
            records = true
            immutablePojos = true
            fluentSetters = true
          }
          target {
            packageName = ''
            directory = 'io.jacobking.jooq'  // default (can be omitted)
          }
          strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
        }
      }
    }
  }
}